#!/usr/bin/env python 

import json
import platform
import os
import sys

"""
This script is intended to do any post-pull configuration.
Personal rules/guidelines:
- This is PRIMARILY for files that must be modified on a host
- Templates should be stored in .config/yadm/templates
- The actual file should be listed in .gitignore
- Alternate files should be used when possible; however, the following cases may require bootstrapping:
  - Changes for ChromeOS Crotini containers
    - Detect via: Existance of /dev/.cros_milestone file
    - Common changes:
      - Force using X11
"""

class Fingerprint(object):
  def __init__(self):
    return;

  def get_fingerprint(self):
    fingerprint = {}
    fingerprint['flags'] = {}
    
    # Detect the OS
    fingerprint['platform'] = sys.platform
    if fingerprint['platform'] == "linux":
      # Read /etc/os-release
      os_release_dict = {}
      with open("/etc/os-release") as f:
        for line in f:
            k,v = line.rstrip().split("=")
            os_release_dict[k] = v.strip('"') 
      fingerprint['distro'] = os_release_dict['ID']
      fingerprint['distro_version'] = os_release_dict['VERSION_ID']
      
      # If debian, this could be a ChromeOS container. Check the /dev/.cros_milestone path; if it exists, this is chromeos
      if fingerprint['distro'] == "debian":
        if os.path.exists("/dev/.cros_milestone"):
          fingerprint['flags']['chromeos'] = True
   
      # Detect the Windowing system(s)
      # This can be wayland, x11, or Wayland with XWayland providing X11 support
      # https://discourse.ubuntu.com/t/environment-variables-for-wayland-hackers/12750
      # https://unix.stackexchange.com/questions/202891/how-to-know-whether-wayland-or-x11-is-being-used/355476#355476
      fingerprint['flags']['wayland'] = (os.environ.get("WAYLAND_DISPLAY") != None)
      fingerprint['flags']['x11'] = (os.environ.get("DISPLAY") != None)

      # Detect virtualization
      # https://ostechnix.com/check-linux-system-physical-virtual-machine/
      # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/identify_ec2_instances.html
      # https://www.freedesktop.org/software/systemd/man/latest/systemd-detect-virt.html
      # - systemd-detect-virt
      #   best option, esp if systemd >= 239
      # - dmidecode
      #   EC2:
      #   sudo dmidecode -s system-manufacturer	Amazon EC2
      #   sudo dmidecode -s system-uuid	        starts with ec2 (possible caps, possible small endian)
      #   sudo dmidecode -s system-product-name   AWS instance type (ex. m6i.xlarge)
      # - facter | grep virtual
      #   is_virtual => true
      #   virtual => kvm
      # - lshw
      # - sudo dmesg | grep "Hypervisor detected"
      #   [ 0.000000] Hypervisor detected: KVM
      # - hostnamectl status
      #   chassis: vm


    return fingerprint

def main():
  fingerprint = Fingerprint()
  print(json.dumps(fingerprint.get_fingerprint()))
  return

if __name__ == '__main__': 
  main()
